---
apiVersion: v1
kind: Namespace
metadata:
  name: kubeapps 
---
apiVersion: v1
kind: Namespace
metadata:
  name: kubeless
---
apiVersion: v1
data:
  mongodb-root-password: cVNaMTdsLU41N2RISEhIbg==
kind: Secret
metadata:
  name: mongodb
  namespace: kubeapps
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: mongodb-data
  name: mongodb-data
  namespace: kubeapps
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations: {}
  labels:
    app: mongodb
    created-by: kubeapps
    name: mongodb
  name: mongodb
  namespace: kubeapps
spec:
  minReadySeconds: 30
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations: {}
      labels:
        app: mongodb
        created-by: kubeapps
        name: mongodb
    spec:
      containers:
      - args: []
        env:
        - name: MONGODB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mongodb-root-password
              name: mongodb
        image: bitnami/mongodb:3.4.9-r1
        livenessProbe:
          exec:
            command:
            - mongo
            - --eval
            - db.adminCommand('ping')
          initialDelaySeconds: 30
          timeoutSeconds: 5
        name: mongodb
        ports:
        - containerPort: 27017
          name: mongodb
        readinessProbe:
          exec:
            command:
            - mongo
            - --eval
            - db.adminCommand('ping')
          initialDelaySeconds: 5
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /bitnami/mongodb
          name: data
      imagePullSecrets: []
      terminationGracePeriodSeconds: 30
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: mongodb-data
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: mongodb
  name: mongodb
  namespace: kubeapps
spec:
  ports:
  - port: 27017
    targetPort: mongodb
  selector:
    app: mongodb
    name: mongodb
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app: kubeapps
    created-by: kubeapps
    name: kubeapps
  name: kubeapps
  namespace: kubeapps
spec:
  ports:
  - port: 8080
    targetPort: http
  selector:
    app: kubeapps
    name: kubeapps
  type: ClusterIP
---
apiVersion: v1
data:
  vhost.conf: |
    # Retain the default nginx handling of requests without a "Connection" header
    map $http_upgrade $connection_upgrade {
      default upgrade;
      ''      close;
    }

    # Allow websocket connections
    proxy_set_header Upgrade    $http_upgrade;
    proxy_set_header Connection $connection_upgrade;

    server {
      listen 8080;

      location /api/kube {
        rewrite /api/kube/(.*) /$1 break;
        rewrite /api/kube / break;
        proxy_pass https://kubernetes.default;
        # Disable buffering for log streaming
        proxy_buffering off;
        # Hide Www-Authenticate to prevent it triggering a basic auth prompt in
        # the browser with some clusters
        proxy_hide_header Www-Authenticate;
      }

      location /api/chartsvc {
        rewrite /api/chartsvc/(.*) /$1 break;
        rewrite /api/chartsvc / break;
        proxy_pass http://chartsvc:8080;
      }

      location / {
        proxy_pass http://kubeapps-dashboard-ui:8080;
      }
    }
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    app: kubeapps
    created-by: kubeapps
    name: kubeapps-vhost
  name: kubeapps-vhost-5811f90
  namespace: kubeapps
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations: {}
  labels:
    app: kubeapps
    created-by: kubeapps
    name: kubeapps
  name: kubeapps
  namespace: kubeapps
spec:
  minReadySeconds: 30
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations: {}
      labels:
        app: kubeapps
        created-by: kubeapps
        name: kubeapps
    spec:
      containers:
      - args: []
        env: []
        image: bitnami/nginx:1.12
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 10
        name: nginx
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 0
          timeoutSeconds: 5
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /bitnami/nginx/conf/vhosts
          name: vhost
      imagePullSecrets: []
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: kubeapps-vhost-5811f90
        name: vhost
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    created-by: kubeapps
  name: sealed-secrets-controller
  namespace: kube-system
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    created-by: kubeapps
  name: sealed-secrets-controller
  namespace: kube-system
spec:
  template:
    metadata:
      labels:
        name: sealed-secrets-controller
    spec:
      containers:
      - command:
        - controller
        image: quay.io/bitnami/sealed-secrets-controller:v0.5.1
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
        name: sealed-secrets-controller
        ports:
        - containerPort: 8080
          name: http
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8080
        securityContext:
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1001
      serviceAccountName: sealed-secrets-controller
---
apiVersion: v1
kind: Service
metadata:
  labels:
    created-by: kubeapps
  name: sealed-secrets-controller
  namespace: kube-system
spec:
  ports:
  - port: 8080
  selector:
    name: sealed-secrets-controller
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  labels:
    created-by: kubeapps
  name: sealed-secrets-controller
  namespace: kube-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: sealed-secrets-key-admin
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  labels:
    created-by: kubeapps
  name: sealed-secrets-key-admin
  namespace: kube-system
rules:
- apiGroups:
  - ""
  resourceNames:
  - sealed-secrets-key
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    created-by: kubeapps
  name: sealed-secrets-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: secrets-unsealer
subjects:
- apiGroup: ""
  kind: ServiceAccount
  name: sealed-secrets-controller
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    created-by: kubeapps
  name: secrets-unsealer
rules:
- apiGroups:
  - bitnami.com
  resources:
  - sealedsecrets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
  - update
  - delete
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  labels:
    created-by: kubeapps
  name: sealedsecrets.bitnami.com
spec:
  group: bitnami.com
  names:
    kind: SealedSecret
    listKind: SealedSecretList
    plural: sealedsecrets
    singular: sealedsecret
  scope: Namespaced
  validation:
    openAPIV3Schema:
      $schema: http://json-schema.org/draft-04/schema#
      description: A sealed (encrypted) Secret
      properties:
        spec:
          properties:
            data:
              pattern: ^[^A-Za-z0-9+/=]*$
              type: string
          type: object
      type: object
  version: v1alpha1
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-repositories-read
  name: kubeapps-repositories-read
  namespace: kubeapps
rules:
- apiGroups:
  - kubeapps.com
  resources:
  - apprepositories
  verbs:
  - list
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-repositories-write
  name: kubeapps-repositories-write
  namespace: kubeapps
rules:
- apiGroups:
  - kubeapps.com
  resources:
  - apprepositories
  verbs:
  - get
  - create
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-service-catalog-admin
  name: kubeapps-service-catalog-admin
rules:
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterservicebrokers
  verbs:
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-service-catalog-browse
  name: kubeapps-service-catalog-browse
rules:
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - clusterservicebrokers
  - clusterserviceclasses
  - clusterserviceplans
  verbs:
  - list
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-service-catalog-read
  name: kubeapps-service-catalog-read
rules:
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - serviceinstances
  - servicebindings
  verbs:
  - list
  - get
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-service-catalog-write
  name: kubeapps-service-catalog-write
rules:
- apiGroups:
  - servicecatalog.k8s.io
  resources:
  - serviceinstances
  - servicebindings
  verbs:
  - create
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-applications-read
  name: kubeapps-applications-read
rules:
- apiGroups:
  - helm.bitnami.com
  resources:
  - helmreleases
  verbs:
  - list
  - get
- apiGroups:
  - ""
  - apps
  resources:
  - services
  - deployments
  verbs:
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-tiller-state-read
  name: kubeapps-tiller-state-read
  namespace: kubeapps
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - list
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-applications-write
  name: kubeapps-applications-write
rules:
- apiGroups:
  - helm.bitnami.com
  resources:
  - helmreleases
  verbs:
  - create
  - patch
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-functions-read
  name: kubeapps-functions-read
rules:
- apiGroups:
  - kubeless.io
  resources:
  - functions
  verbs:
  - list
  - get
- apiGroups:
  - ""
  - apps
  resources:
  - pods
  - deployments
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods/log
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services/proxy
  verbs:
  - get
  - create
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-kubeless-config-read
  name: kubeapps-kubeless-config-read
  namespace: kubeless
rules:
- apiGroups:
  - ""
  resourceNames:
  - kubeless-config
  resources:
  - configmaps
  verbs:
  - get
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-functions-write
  name: kubeapps-functions-write
rules:
- apiGroups:
  - kubeless.io
  resources:
  - functions
  verbs:
  - create
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: apprepository-controller
  name: apprepository-controller
rules:
- apiGroups:
  - batch
  resources:
  - cronjobs
  verbs:
  - get
  - list
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: apprepository-controller
  name: apprepository-controller
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: apprepository-controller
subjects:
- kind: ServiceAccount
  name: apprepository-controller
  namespace: kubeapps
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: apprepositories.kubeapps.com
  name: apprepositories.kubeapps.com
spec:
  group: kubeapps.com
  names:
    kind: AppRepository
    plural: apprepositories
    shortNames:
    - apprepos
  version: v1alpha1
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations: {}
  labels:
    app: apprepository-controller
    created-by: kubeapps
    name: apprepository-controller
  name: apprepository-controller
  namespace: kubeapps
spec:
  minReadySeconds: 30
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations: {}
      labels:
        app: apprepository-controller
        created-by: kubeapps
        name: apprepository-controller
    spec:
      containers:
      - args:
        - --logtostderr
        - --repo-sync-image=kubeapps/chart-repo:v1.0.0-alpha.4
        command:
        - /apprepository-controller
        env: []
        image: kubeapps/apprepository-controller:v1.0.0-alpha.4
        name: controller
        ports: []
        stdin: false
        tty: false
        volumeMounts: []
      imagePullSecrets: []
      serviceAccountName: apprepository-controller
      terminationGracePeriodSeconds: 30
      volumes: []
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: apprepository-controller
  name: apprepository-controller
  namespace: kubeapps
rules:
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
- apiGroups:
  - batch
  resources:
  - cronjobs
  verbs:
  - create
  - get
  - list
  - update
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  verbs:
  - create
- apiGroups:
  - kubeapps.com
  resources:
  - apprepositories
  verbs:
  - get
  - list
  - update
  - watch
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: apprepository-controller
  name: apprepository-controller
  namespace: kubeapps
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: apprepository-controller
subjects:
- kind: ServiceAccount
  name: apprepository-controller
  namespace: kubeapps
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: apprepository-controller
  name: apprepository-controller
  namespace: kubeapps
---
apiVersion: kubeapps.com/v1alpha1
kind: AppRepository
metadata:
  annotations: {}
  labels:
    created-by: sealingtech
    name: edcop-public
  name: edcop-public
  namespace: kubeapps
spec:
  type: helm
  url: http://repos.sealingtech.org/charts/
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations: {}
  labels:
    app: chartsvc
    created-by: kubeapps
    name: chartsvc
  name: chartsvc
  namespace: kubeapps
spec:
  minReadySeconds: 30
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations: {}
      labels:
        app: chartsvc
        created-by: kubeapps
        name: chartsvc
    spec:
      containers:
      - args:
        - --mongo-url=mongodb.kubeapps
        - --mongo-user=root
        command:
        - /chartsvc
        env:
        - name: MONGO_PASSWORD
          valueFrom:
            secretKeyRef:
              key: mongodb-root-password
              name: mongodb
        image: kubeapps/chartsvc:v1.0.0-alpha.4
        name: chartsvc
        ports:
        - containerPort: 8080
          name: http
        stdin: false
        tty: false
        volumeMounts: []
      imagePullSecrets: []
      terminationGracePeriodSeconds: 30
      volumes: []
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: chartsvc
  name: chartsvc
  namespace: kubeapps
spec:
  ports:
  - port: 8080
    targetPort: http
  selector:
    app: chartsvc
    name: chartsvc
  type: ClusterIP
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: helmreleases.helm.bitnami.com
  name: helmreleases.helm.bitnami.com
  namespace: kubeapps
spec:
  group: helm.bitnami.com
  names:
    kind: HelmRelease
    listKind: HelmReleaseList
    plural: helmreleases
    singular: helmrelease
  scope: Namespaced
  version: v1
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: tiller-cluster-admin
  name: tiller-cluster-admin
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- kind: ServiceAccount
  name: tiller
  namespace: kubeapps
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: helm
    created-by: kubeapps
    name: tiller
  name: tiller-deploy
  namespace: kubeapps
spec:
  strategy: {}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: helm
        name: tiller
    spec:
      containers:
      - args:
        - --listen=localhost:44134
        command:
        - /tiller
        env:
        - name: TILLER_NAMESPACE
          value: kubeapps
        - name: TILLER_HISTORY_MAX
          value: "0"
        image: gcr.io/kubernetes-helm/tiller:v2.8.0
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /liveness
            port: 44135
          initialDelaySeconds: 1
          timeoutSeconds: 1
        name: tiller
        ports: []
        readinessProbe:
          httpGet:
            path: /readiness
            port: 44135
          initialDelaySeconds: 1
          timeoutSeconds: 1
        resources: {}
      - args:
        - --home=/helm
        - --host=localhost:44134
        command:
        - /controller
        env:
        - name: POD_NAMESPACE
          value: kubeapps
        - name: TMPDIR
          value: /helm
        image: bitnami/helm-crd-controller:v0.4.1
        name: controller
        ports: []
        securityContext:
          readOnlyRootFilesystem: true
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /helm
          name: home
      serviceAccountName: tiller
      volumes:
      - emptyDir: {}
        name: home
status: {}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: tiller
  name: tiller
  namespace: kubeapps
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations: {}
  labels:
    created-by: kubeapps
    name: kubeapps-dashboard-ui
  name: kubeapps-dashboard-ui
  namespace: kubeapps
spec:
  minReadySeconds: 30
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations: {}
      labels:
        created-by: kubeapps
        name: kubeapps-dashboard-ui
    spec:
      containers:
      - args: []
        env: []
        image: gcr.io/edcop-public/dashboard:1.0.0-alpha-4
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 60
          timeoutSeconds: 10
        name: dashboard
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 0
          timeoutSeconds: 5
        stdin: false
        tty: false
        volumeMounts:
        - mountPath: /bitnami/nginx/conf/vhosts
          name: vhost
      imagePullSecrets: []
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          name: kubeapps-dashboard-ui-vhost-425de41
        name: vhost
---
apiVersion: v1
kind: Service
metadata:
  annotations: {}
  labels:
    app: kubeapps-dashboard
    created-by: kubeapps
    name: kubeapps-dashboard-ui
  name: kubeapps-dashboard-ui
  namespace: kubeapps
spec:
  ports:
  - port: 8080
    targetPort: http
  selector:
    name: kubeapps-dashboard-ui
  type: ClusterIP
---
apiVersion: v1
data:
  vhost.conf: |
    server {
      listen 8080;

      gzip on;
      # Angular CLI already has gzipped the assets (ng build --prod --aot)
      gzip_static  on;

      location / {
        try_files $uri /index.html;
      }
    }

    # Redirect www to non-www
    # Taken from https://easyengine.io/tutorials/nginx/www-non-www-redirection/
    server {
      server_name "~^www\.(.*)$" ;
      return 301 $scheme://$1$request_uri ;
    }
kind: ConfigMap
metadata:
  annotations: {}
  labels:
    app: kubeapps-dashboard
    created-by: kubeapps
    name: kubeapps-dashboard-ui-vhost
  name: kubeapps-dashboard-ui-vhost-425de41
  namespace: kubeapps
---
apiVersion: apps/v1beta1
kind: Deployment
metadata:
  labels:
    created-by: kubeapps
    kubeless: controller
  name: kubeless-controller-manager
  namespace: kubeless
spec:
  selector:
    matchLabels:
      kubeless: controller
  template:
    metadata:
      labels:
        kubeless: controller
    spec:
      containers:
      - env:
        - name: KUBELESS_INGRESS_ENABLED
          valueFrom:
            configMapKeyRef:
              key: ingress-enabled
              name: kubeless-config
        - name: KUBELESS_SERVICE_TYPE
          valueFrom:
            configMapKeyRef:
              key: service-type
              name: kubeless-config
        - name: KUBELESS_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KUBELESS_CONFIG
          value: kubeless-config
        image: bitnami/kubeless-controller-manager:v1.0.0-alpha.4
        imagePullPolicy: IfNotPresent
        name: kubeless-controller-manager
      serviceAccountName: controller-acct
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    created-by: kubeapps
  name: controller-acct
  namespace: kubeless
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    created-by: kubeapps
  name: kubeless-controller-deployer
rules:
- apiGroups:
  - ""
  resources:
  - services
  - configmaps
  verbs:
  - create
  - get
  - delete
  - list
  - update
  - patch
- apiGroups:
  - apps
  - extensions
  resources:
  - deployments
  verbs:
  - create
  - get
  - delete
  - list
  - update
  - patch
- apiGroups:
  - ""
  resources:
  - pods
  verbs:
  - list
  - delete
- apiGroups:
  - ""
  resourceNames:
  - kubeless-registry-credentials
  resources:
  - secrets
  verbs:
  - get
- apiGroups:
  - kubeless.io
  resources:
  - functions
  - httptriggers
  - cronjobtriggers
  verbs:
  - get
  - list
  - watch
  - update
  - delete
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs:
  - create
  - get
  - delete
  - deletecollection
  - list
  - update
  - patch
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs:
  - create
  - get
  - delete
  - list
  - update
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
- apiGroups:
  - monitoring.coreos.com
  resources:
  - alertmanagers
  - prometheuses
  - servicemonitors
  verbs:
  - '*'
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs:
  - create
  - get
  - list
  - update
  - delete
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    created-by: kubeapps
  name: kubeless-controller-deployer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kubeless-controller-deployer
subjects:
- kind: ServiceAccount
  name: controller-acct
  namespace: kubeless
---
apiVersion: apiextensions.k8s.io/v1beta1
description: Kubernetes Native Serverless Framework
kind: CustomResourceDefinition
metadata:
  labels:
    created-by: kubeapps
  name: functions.kubeless.io
spec:
  group: kubeless.io
  names:
    kind: Function
    plural: functions
    singular: function
  scope: Namespaced
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
description: CRD object for HTTP trigger type
kind: CustomResourceDefinition
metadata:
  labels:
    created-by: kubeapps
  name: httptriggers.kubeless.io
spec:
  group: kubeless.io
  names:
    kind: HTTPTrigger
    plural: httptriggers
    singular: httptrigger
  scope: Namespaced
  version: v1beta1
---
apiVersion: apiextensions.k8s.io/v1beta1
description: CRD object for HTTP trigger type
kind: CustomResourceDefinition
metadata:
  labels:
    created-by: kubeapps
  name: cronjobtriggers.kubeless.io
spec:
  group: kubeless.io
  names:
    kind: CronJobTrigger
    plural: cronjobtriggers
    singular: cronjobtrigger
  scope: Namespaced
  version: v1beta1
---
apiVersion: v1
data:
  builder-image: kubeless/function-image-builder:v1.0.0-alpha.4
  deployment: '{}'
  enable-build-step: "false"
  function-registry-tls-verify: "true"
  ingress-enabled: "false"
  runtime-images: |-
    [
      {
        "ID": "python",
        "compiled": false,
        "versions": [
          {
            "name": "python27",
            "version": "2.7",
            "runtimeImage": "kubeless/python@sha256:07cfb0f3d8b6db045dc317d35d15634d7be5e436944c276bf37b1c630b03add8",
            "initImage": "python:2.7"
          },
          {
            "name": "python34",
            "version": "3.4",
            "runtimeImage": "kubeless/python@sha256:f19640c547a3f91dbbfb18c15b5e624029b4065c1baf2892144e07c36f0a7c8f",
            "initImage": "python:3.4"
          },
          {
            "name": "python36",
            "version": "3.6",
            "runtimeImage": "kubeless/python@sha256:0c9f8f727d42625a4e25230cfe612df7488b65f283e7972f84108d87e7443d72",
            "initImage": "python:3.6"
          }
        ],
        "depName": "requirements.txt",
        "fileNameSuffix": ".py"
      },
      {
        "ID": "nodejs",
        "compiled": false,
        "versions": [
          {
            "name": "node6",
            "version": "6",
            "runtimeImage": "kubeless/nodejs@sha256:61c5a10aacb709c4575a09a4aa28f822b2d008c0dbf4aa0b124705ee9ca143f9",
            "initImage": "node:6.10"
          },
          {
            "name": "node8",
            "version": "8",
            "runtimeImage": "kubeless/nodejs@sha256:fc1aa96e55116400ee13d664a655dfb2025ded91858ebfd5fc0c8f0d6b923eba",
            "initImage": "node:8"
          }
        ],
        "depName": "package.json",
        "fileNameSuffix": ".js"
      },
      {
        "ID": "ruby",
        "compiled": false,
        "versions": [
          {
            "name": "ruby24",
            "version": "2.4",
            "runtimeImage": "kubeless/ruby@sha256:0dce29c0eb2a246f7d825b6644eeae7957b26f2bfad2b7987f2134cc7b350f2f",
            "initImage": "bitnami/ruby:2.4"
          }
        ],
        "depName": "Gemfile",
        "fileNameSuffix": ".rb"
      },
      {
        "ID": "php",
        "compiled": false,
        "versions": [
          {
            "name": "php72",
            "version": "7.2",
            "runtimeImage": "kubeless/php@sha256:82b94c691302bc82f3900444255cabb8f230487764eafeba7866ac49d90ddc3b",
            "initImage": "composer:1.6"
          }
        ],
        "depName": "composer.json",
        "fileNameSuffix": ".php"
      },
      {
        "ID": "go",
        "compiled": true,
        "versions": [
          {
            "name": "go1.10",
            "version": "1.10",
            "runtimeImage": "kubeless/go@sha256:bf72622344a54e4360f31d3fea5eb9dca2c96fbedc6f0ad7c54f3eb8fb7bd353",
            "initImage": "kubeless/go-init@sha256:ce6ef4fafe518ed78b3a68b03947c064fec1cf8c667cd109e9331f227877b3a9"
          }
        ],
        "depName": "Gopkg.toml",
        "fileNameSuffix": ".go"
      }
    ]
  service-type: ClusterIP
kind: ConfigMap
metadata:
  labels:
    created-by: kubeapps
  name: kubeless-config
  namespace: kubeless
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    ingress.kubernetes.io/ssl-redirect: "false"
    kubernetes.io/ingress.class: traefik 
  labels:
    created-by: kubeapps
    name: kubeapps
  name: kubeapps
  namespace: kubeapps
spec:
  rules:
  - host: apps.test.edcop.io
    http:
      paths:
      - backend:
          serviceName: kubeapps
          servicePort: 8080
        path: /
  tls:
  - secretName: edcop-wild 
---
